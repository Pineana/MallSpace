// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"order/ent/order"
	"order/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUserID sets the "user_id" field.
func (ou *OrderUpdate) SetUserID(i int) *OrderUpdate {
	ou.mutation.ResetUserID()
	ou.mutation.SetUserID(i)
	return ou
}

// AddUserID adds i to the "user_id" field.
func (ou *OrderUpdate) AddUserID(i int) *OrderUpdate {
	ou.mutation.AddUserID(i)
	return ou
}

// SetOrderID sets the "order_id" field.
func (ou *OrderUpdate) SetOrderID(s string) *OrderUpdate {
	ou.mutation.SetOrderID(s)
	return ou
}

// SetStatus sets the "status" field.
func (ou *OrderUpdate) SetStatus(o order.Status) *OrderUpdate {
	ou.mutation.SetStatus(o)
	return ou
}

// SetTradeID sets the "tradeID" field.
func (ou *OrderUpdate) SetTradeID(s string) *OrderUpdate {
	ou.mutation.SetTradeID(s)
	return ou
}

// SetOrderMount sets the "order_mount" field.
func (ou *OrderUpdate) SetOrderMount(f float32) *OrderUpdate {
	ou.mutation.ResetOrderMount()
	ou.mutation.SetOrderMount(f)
	return ou
}

// AddOrderMount adds f to the "order_mount" field.
func (ou *OrderUpdate) AddOrderMount(f float32) *OrderUpdate {
	ou.mutation.AddOrderMount(f)
	return ou
}

// SetPayAt sets the "pay_at" field.
func (ou *OrderUpdate) SetPayAt(t time.Time) *OrderUpdate {
	ou.mutation.SetPayAt(t)
	return ou
}

// SetNillablePayAt sets the "pay_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePayAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetPayAt(*t)
	}
	return ou
}

// ClearPayAt clears the value of the "pay_at" field.
func (ou *OrderUpdate) ClearPayAt() *OrderUpdate {
	ou.mutation.ClearPayAt()
	return ou
}

// SetCreateAt sets the "create_at" field.
func (ou *OrderUpdate) SetCreateAt(t time.Time) *OrderUpdate {
	ou.mutation.SetCreateAt(t)
	return ou
}

// SetUpdateAt sets the "update_at" field.
func (ou *OrderUpdate) SetUpdateAt(t time.Time) *OrderUpdate {
	ou.mutation.SetUpdateAt(t)
	return ou
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableUpdateAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetUpdateAt(*t)
	}
	return ou
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ou *OrderUpdate) ClearUpdateAt() *OrderUpdate {
	ou.mutation.ClearUpdateAt()
	return ou
}

// SetDeleteAt sets the "delete_at" field.
func (ou *OrderUpdate) SetDeleteAt(t time.Time) *OrderUpdate {
	ou.mutation.SetDeleteAt(t)
	return ou
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDeleteAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetDeleteAt(*t)
	}
	return ou
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (ou *OrderUpdate) ClearDeleteAt() *OrderUpdate {
	ou.mutation.ClearDeleteAt()
	return ou
}

// SetIsDeleted sets the "is_deleted" field.
func (ou *OrderUpdate) SetIsDeleted(b bool) *OrderUpdate {
	ou.mutation.SetIsDeleted(b)
	return ou
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableIsDeleted(b *bool) *OrderUpdate {
	if b != nil {
		ou.SetIsDeleted(*b)
	}
	return ou
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ou.hooks) == 0 {
		if err = ou.check(); err != nil {
			return 0, err
		}
		affected, err = ou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ou.check(); err != nil {
				return 0, err
			}
			ou.mutation = mutation
			affected, err = ou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ou.hooks) - 1; i >= 0; i-- {
			if ou.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrderUpdate) check() error {
	if v, ok := ou.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	return nil
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: order.FieldID,
			},
		},
	}
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UserID(); ok {
		_spec.SetField(order.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedUserID(); ok {
		_spec.AddField(order.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ou.mutation.OrderID(); ok {
		_spec.SetField(order.FieldOrderID, field.TypeString, value)
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ou.mutation.TradeID(); ok {
		_spec.SetField(order.FieldTradeID, field.TypeString, value)
	}
	if value, ok := ou.mutation.OrderMount(); ok {
		_spec.SetField(order.FieldOrderMount, field.TypeFloat32, value)
	}
	if value, ok := ou.mutation.AddedOrderMount(); ok {
		_spec.AddField(order.FieldOrderMount, field.TypeFloat32, value)
	}
	if value, ok := ou.mutation.PayAt(); ok {
		_spec.SetField(order.FieldPayAt, field.TypeTime, value)
	}
	if ou.mutation.PayAtCleared() {
		_spec.ClearField(order.FieldPayAt, field.TypeTime)
	}
	if value, ok := ou.mutation.CreateAt(); ok {
		_spec.SetField(order.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.UpdateAt(); ok {
		_spec.SetField(order.FieldUpdateAt, field.TypeTime, value)
	}
	if ou.mutation.UpdateAtCleared() {
		_spec.ClearField(order.FieldUpdateAt, field.TypeTime)
	}
	if value, ok := ou.mutation.DeleteAt(); ok {
		_spec.SetField(order.FieldDeleteAt, field.TypeTime, value)
	}
	if ou.mutation.DeleteAtCleared() {
		_spec.ClearField(order.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := ou.mutation.IsDeleted(); ok {
		_spec.SetField(order.FieldIsDeleted, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetUserID sets the "user_id" field.
func (ouo *OrderUpdateOne) SetUserID(i int) *OrderUpdateOne {
	ouo.mutation.ResetUserID()
	ouo.mutation.SetUserID(i)
	return ouo
}

// AddUserID adds i to the "user_id" field.
func (ouo *OrderUpdateOne) AddUserID(i int) *OrderUpdateOne {
	ouo.mutation.AddUserID(i)
	return ouo
}

// SetOrderID sets the "order_id" field.
func (ouo *OrderUpdateOne) SetOrderID(s string) *OrderUpdateOne {
	ouo.mutation.SetOrderID(s)
	return ouo
}

// SetStatus sets the "status" field.
func (ouo *OrderUpdateOne) SetStatus(o order.Status) *OrderUpdateOne {
	ouo.mutation.SetStatus(o)
	return ouo
}

// SetTradeID sets the "tradeID" field.
func (ouo *OrderUpdateOne) SetTradeID(s string) *OrderUpdateOne {
	ouo.mutation.SetTradeID(s)
	return ouo
}

// SetOrderMount sets the "order_mount" field.
func (ouo *OrderUpdateOne) SetOrderMount(f float32) *OrderUpdateOne {
	ouo.mutation.ResetOrderMount()
	ouo.mutation.SetOrderMount(f)
	return ouo
}

// AddOrderMount adds f to the "order_mount" field.
func (ouo *OrderUpdateOne) AddOrderMount(f float32) *OrderUpdateOne {
	ouo.mutation.AddOrderMount(f)
	return ouo
}

// SetPayAt sets the "pay_at" field.
func (ouo *OrderUpdateOne) SetPayAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetPayAt(t)
	return ouo
}

// SetNillablePayAt sets the "pay_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePayAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetPayAt(*t)
	}
	return ouo
}

// ClearPayAt clears the value of the "pay_at" field.
func (ouo *OrderUpdateOne) ClearPayAt() *OrderUpdateOne {
	ouo.mutation.ClearPayAt()
	return ouo
}

// SetCreateAt sets the "create_at" field.
func (ouo *OrderUpdateOne) SetCreateAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetCreateAt(t)
	return ouo
}

// SetUpdateAt sets the "update_at" field.
func (ouo *OrderUpdateOne) SetUpdateAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUpdateAt(t)
	return ouo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableUpdateAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetUpdateAt(*t)
	}
	return ouo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ouo *OrderUpdateOne) ClearUpdateAt() *OrderUpdateOne {
	ouo.mutation.ClearUpdateAt()
	return ouo
}

// SetDeleteAt sets the "delete_at" field.
func (ouo *OrderUpdateOne) SetDeleteAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetDeleteAt(t)
	return ouo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDeleteAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetDeleteAt(*t)
	}
	return ouo
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (ouo *OrderUpdateOne) ClearDeleteAt() *OrderUpdateOne {
	ouo.mutation.ClearDeleteAt()
	return ouo
}

// SetIsDeleted sets the "is_deleted" field.
func (ouo *OrderUpdateOne) SetIsDeleted(b bool) *OrderUpdateOne {
	ouo.mutation.SetIsDeleted(b)
	return ouo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableIsDeleted(b *bool) *OrderUpdateOne {
	if b != nil {
		ouo.SetIsDeleted(*b)
	}
	return ouo
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	var (
		err  error
		node *Order
	)
	if len(ouo.hooks) == 0 {
		if err = ouo.check(); err != nil {
			return nil, err
		}
		node, err = ouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ouo.check(); err != nil {
				return nil, err
			}
			ouo.mutation = mutation
			node, err = ouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouo.hooks) - 1; i >= 0; i-- {
			if ouo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ouo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ouo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Order)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrderUpdateOne) check() error {
	if v, ok := ouo.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	return nil
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: order.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UserID(); ok {
		_spec.SetField(order.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedUserID(); ok {
		_spec.AddField(order.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.OrderID(); ok {
		_spec.SetField(order.FieldOrderID, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ouo.mutation.TradeID(); ok {
		_spec.SetField(order.FieldTradeID, field.TypeString, value)
	}
	if value, ok := ouo.mutation.OrderMount(); ok {
		_spec.SetField(order.FieldOrderMount, field.TypeFloat32, value)
	}
	if value, ok := ouo.mutation.AddedOrderMount(); ok {
		_spec.AddField(order.FieldOrderMount, field.TypeFloat32, value)
	}
	if value, ok := ouo.mutation.PayAt(); ok {
		_spec.SetField(order.FieldPayAt, field.TypeTime, value)
	}
	if ouo.mutation.PayAtCleared() {
		_spec.ClearField(order.FieldPayAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.CreateAt(); ok {
		_spec.SetField(order.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.UpdateAt(); ok {
		_spec.SetField(order.FieldUpdateAt, field.TypeTime, value)
	}
	if ouo.mutation.UpdateAtCleared() {
		_spec.ClearField(order.FieldUpdateAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.DeleteAt(); ok {
		_spec.SetField(order.FieldDeleteAt, field.TypeTime, value)
	}
	if ouo.mutation.DeleteAtCleared() {
		_spec.ClearField(order.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.IsDeleted(); ok {
		_spec.SetField(order.FieldIsDeleted, field.TypeBool, value)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
